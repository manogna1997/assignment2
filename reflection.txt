In short

Chapter 3,4 walk us through the building blocks of React JS framework such has its architecure, lifecycle, data flow and terminology used for build a React app. 

Chapter 3: 
 - In this chapter we start with dividing our page view into smaller views called react components.
 - the developer is free to define what part of WEB PAGE can be designed into a component 
 - every react component is a entity of its own and can work has an independent view. for example
    - its has its own HTML page to render.
    - own state and logic 
    - own life cycle
 - React Component can be create by extending classes to React.Component and defining the render() method, and all other setup in managed by the framework.
 - React JS tracks this components life cycle, and if we have array of same component it uses the key attribute to track them.
 - Passing date to component can be done using "props", one should use props too pass immutable data (final). we can also pass complex pojo object using props.
 - React also gives us property validation mechanism to handle strongly typed language using JSX.
 - Finally, A web page can be a composition of different components and its up to react to handle which component has changes and needs to be re rendered from Virtual DOM.


Chapter 4:
 - In this chapter we are introduced to components lifecycle, state and design.
 - By default every react js component goes through a set of lifecycle events (i.e method call) depending on event type.
 - method calls in sequence for event type.
    - mount: constructor() , render() , componentDidMount()
    - updating : shouldComponentUpdate()
    - unmount : componentWillUnMount()
 - A component can have it only state if defined and those which dont have a state are called stateless components.
 - set is set using method setState() or by directly using "this.state = { }" in constructor().
 - in order to bind methods to handle events we need to bind them to the component from constructor() or else method call will be never happen.
 - every time a state changes in a component react re render the whole component falling the update event lifecycle.
 - fallow the tree branch architecure while designing components.
 - state vs props : use state for all mutable vars and if view needs to change, while props are used for immutable objects or initila values to state.  
    

